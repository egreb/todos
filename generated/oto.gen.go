// Code generated by oto; DO NOT EDIT.

package generated

import (
	"context"
	"net/http"

	"github.com/pacedotdev/oto/otohttp"

	todo "egreb.net/todos/todo"
)

// GreeterService makes nice greetings.
type GreeterService interface {

	// Greet makes a greeting.
	Greet(context.Context, GreetRequest) (*GreetResponse, error)
}

// TodoService create, read, update or delete.
type TodoService interface {
	Create(context.Context, CreateTodoRequest) (*CreateTodoResponse, error)
	Delete(context.Context, DeleteTodoRequest) (*DeleteTodoResponse, error)
	Get(context.Context, GetTodoRequest) (*GetTodoResponse, error)
	GetAll(context.Context, GetAllTodosRequest) (*GetAllTodosResponse, error)
}

type greeterServiceServer struct {
	server         *otohttp.Server
	greeterService GreeterService
}

// Register adds the GreeterService to the otohttp.Server.
func RegisterGreeterService(server *otohttp.Server, greeterService GreeterService) {
	handler := &greeterServiceServer{
		server:         server,
		greeterService: greeterService,
	}
	server.Register("GreeterService", "Greet", handler.handleGreet)
}

func (s *greeterServiceServer) handleGreet(w http.ResponseWriter, r *http.Request) {
	var request GreetRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.greeterService.Greet(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

type todoServiceServer struct {
	server      *otohttp.Server
	todoService TodoService
}

// Register adds the TodoService to the otohttp.Server.
func RegisterTodoService(server *otohttp.Server, todoService TodoService) {
	handler := &todoServiceServer{
		server:      server,
		todoService: todoService,
	}
	server.Register("TodoService", "Create", handler.handleCreate)
	server.Register("TodoService", "Delete", handler.handleDelete)
	server.Register("TodoService", "Get", handler.handleGet)
	server.Register("TodoService", "GetAll", handler.handleGetAll)
}

func (s *todoServiceServer) handleCreate(w http.ResponseWriter, r *http.Request) {
	var request CreateTodoRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.todoService.Create(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *todoServiceServer) handleDelete(w http.ResponseWriter, r *http.Request) {
	var request DeleteTodoRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.todoService.Delete(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *todoServiceServer) handleGet(w http.ResponseWriter, r *http.Request) {
	var request GetTodoRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.todoService.Get(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *todoServiceServer) handleGetAll(w http.ResponseWriter, r *http.Request) {
	var request GetAllTodosRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.todoService.GetAll(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

type CreateTodoRequest struct {
	Title       string `json:"title"`
	Description string `json:"description"`
}

type Todo struct {
	ID          int    `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Completed   bool   `json:"completed"`
	CreatedAt   string `json:"createdAt"`
	UpdatedAt   string `json:"updatedAt"`
}

type CreateTodoResponse struct {
	Todo todo.Todo `json:"todo"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type DeleteTodoRequest struct {
	TodoId int `json:"todoID"`
}

type DeleteTodoResponse struct {
	Success bool `json:"success"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// GetAllTodosRequest - needs pagination
type GetAllTodosRequest struct {
}

// GetAllTodosResponse - needs pagination
type GetAllTodosResponse struct {
	Todos []todo.Todo `json:"todos"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// GetTodoRequest based by id
type GetTodoRequest struct {
	ID int `json:"id"`
}

// GetTodoResponse returns the todo.
type GetTodoResponse struct {
	Todo todo.Todo `json:"todo"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// GreetRequest is the request object for GreeterService.Greet.
type GreetRequest struct {
	// Name is the person to greet.
	Name string `json:"name"`
}

// GreetResponse is the response object containing a person's greeting.
type GreetResponse struct {
	// Greeting is the greeting that was generated.
	Greeting string `json:"greeting"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
